from aiogram import types, Router, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from tgbot.triggers import USER_MAPPING
import re
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG)

router = Router()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /inst
@router.message(Command(commands=["inst"]))
async def fix_handler(message: types.Message, bot: Bot):
    try:
        time_match = re.search(r"(\d{1,2}:\d{2})", message.text)
        time = time_match.group(1) if time_match else "–∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ–º—Å—è"
        photo_url = "https://battleclub.space/uploads/monthly_2022_07/baylor.jpg.02e0df864753bf47b1ef76303b993a1d.jpg"
        keyboard = create_keyboard()
        sent_message = await bot.send_photo(
            chat_id=message.chat.id,
            photo=photo_url,
            caption=(
                f"‚ò†Ô∏è*–ò–¥–µ–º –≤ –∏–Ω—Å—Ç—ã {time}*.‚ò†Ô∏è\n\n–ö–∞–∫ –æ–±—ã—á–Ω–æ –∏–¥—É—Ç –î–º–∏—Ç—Ä–∏–π(–ú–∞–∫–∞—Ä–æ–Ω–æ–í–∏—Ä—É—Å), –õ–µ–æ–Ω–∏–¥(–¢—É–º–∞–Ω–Ω—ã–π–¢–æ—Ä) –∏ –∫—Ç–æ-—Ç–æ –µ—â–µ. –ï—Å—Ç—å 5 –º–µ—Å—Ç.\n\n"
                f"‚ö°‚ö°‚ö°*–ù–∞–∂–º–∏—Ç–µ ‚ûï –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è*‚ö°‚ö°‚ö°"
            ),
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        await message.chat.pin_message(sent_message.message_id)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —Å id: {sent_message.message_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /inst: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def parse_participants(caption: str):
    parts = caption.split("–ñ–µ–ª–∞—é—â–∏–µ:")
    first_part = parts[0]
    first_part_names = []
    match1 = re.search(r"–ò–¥—É—Ç \d+ —á–µ–ª–æ–≤–µ–∫: (.+)", first_part, flags=re.DOTALL)
    if match1:
        first_part_names = [name.strip() for name in match1.group(1).split(",") if name.strip()]

    second_part = parts[1] if len(parts) > 1 else ""
    second_part_names = [name.strip() for name in second_part.split(",") if name.strip()]

    participants = first_part_names + second_part_names
    return participants

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –ø–æ–¥–ø–∏—Å–∏
def extract_time_from_caption(caption: str):
    time_match = re.search(r"–ò–¥–µ–º –≤ –∏–Ω—Å—Ç—ã\s*(\d{1,2}:\d{2}|–∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ–º—Å—è)", caption)
    return time_match.group(1) if time_match else "–∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ–º—Å—è"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
async def update_caption(photo_message: types.Message, participants: list, callback: types.CallbackQuery, action_message: str, time: str, keyboard: InlineKeyboardMarkup):
    main_participants = participants[:5]
    extra_participants = participants[5:]
    participants_count = len(participants)

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    logging.debug(f"–ò–¥—É—Ç: {len(main_participants)} —á–µ–ª–æ–≤–µ–∫, –ñ–µ–ª–∞—é—â–∏–µ: {len(extra_participants)} —á–µ–ª–æ–≤–µ–∫")

    if not participants:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç
        updated_text = (
            f"‚ò†Ô∏è*–ò–¥–µ–º –≤ –∏–Ω—Å—Ç—ã {time}*.‚ò†Ô∏è\n\n –ö–∞–∫ –æ–±—ã—á–Ω–æ –∏–¥—É—Ç –î–º–∏—Ç—Ä–∏–π(–ú–∞–∫–∞—Ä–æ–Ω–æ–í–∏—Ä—É—Å), –õ–µ–æ–Ω–∏–¥(–¢—É–º–∞–Ω–Ω—ã–π–¢–æ—Ä) –∏ –∫—Ç–æ-—Ç–æ –µ—â–µ. –ï—Å—Ç—å 5 –º–µ—Å—Ç \n\n"
            f"‚ö°‚ö°‚ö°*–ù–∞–∂–º–∏—Ç–µ ‚ûï –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è*.‚ö°‚ö°‚ö°"
        )
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        main_text = ", ".join(main_participants)
        extra_text = ", ".join(extra_participants)
        updated_text = (
            f"‚ò†Ô∏è*–ò–¥–µ–º –≤ –∏–Ω—Å—Ç—ã {time}*.‚ò†Ô∏è\n\n –ö–∞–∫ –æ–±—ã—á–Ω–æ –∏–¥—É—Ç –î–º–∏—Ç—Ä–∏–π(–ú–∞–∫–∞—Ä–æ–Ω–æ–í–∏—Ä—É—Å), –õ–µ–æ–Ω–∏–¥(–¢—É–º–∞–Ω–Ω—ã–π–¢–æ—Ä) –∏ –∫—Ç–æ-—Ç–æ –µ—â–µ. –ï—Å—Ç—å 5 –º–µ—Å—Ç. \n\n"
            f"‚ö°‚ö°‚ö°*–ù–∞–∂–º–∏—Ç–µ ‚ûï –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É—á–∞—Å—Ç–∏—è*.‚ö°‚ö°‚ö°\n\n"
            f"üòà–ò–¥—É—Ç {len(main_participants)} —á–µ–ª–æ–≤–µ–∫: {main_text}"
        )
        if extra_participants:
            updated_text += f"\n–ñ–µ–ª–∞—é—â–∏–µ: {extra_text}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    if photo_message.caption != updated_text or photo_message.reply_markup != keyboard:
        try:
            await photo_message.edit_caption(caption=updated_text, parse_mode="Markdown", reply_markup=keyboard)
            await callback.answer(action_message)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        logging.debug("–ò–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
        await callback.answer(action_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
@router.callback_query(lambda callback: callback.data == "join_plus")
async def handle_plus_reaction(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.first_name
    message = callback.message

    participants = parse_participants(message.caption)
    logging.debug(f"[–î–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è] –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
    display_name = USER_MAPPING.get(user_id, username)

    if display_name in participants:
        await callback.answer(f"–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ, {display_name}!")
        return

    participants.append(display_name)
    logging.debug(f"[–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è] –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}")

    time = extract_time_from_caption(message.caption)
    keyboard = create_keyboard()
    await update_caption(message, participants, callback, f"–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å, {display_name}!", time, keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "‚ûñ –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
@router.callback_query(lambda callback: callback.data == "join_minus")
async def handle_minus_reaction(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.first_name
    message = callback.message

    participants = parse_participants(message.caption)
    logging.debug(f"[–î–æ —É–¥–∞–ª–µ–Ω–∏—è] –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}")

    display_name = USER_MAPPING.get(user_id, username)

    if display_name in participants:
        participants.remove(display_name)
    else:
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ.")
        return

    logging.debug(f"[–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è] –£—á–∞—Å—Ç–Ω–∏–∫–∏: {participants}")

    time = extract_time_from_caption(message.caption)
    keyboard = create_keyboard()
    await update_caption(message, participants, callback, f"–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ, {display_name}.", time, keyboard)
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_keyboard():
    plus_button = InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_plus")
    minus_button = InlineKeyboardButton(text="‚ûñ –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join_minus")
    return InlineKeyboardMarkup(inline_keyboard=[[plus_button, minus_button]])
