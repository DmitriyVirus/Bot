import logging
import asyncio
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from tgbot.triggers import TRIGGERS, WELCOME_TEXT, HELP_TEXT_HEADER, COMMANDS_LIST

router = Router()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(lambda message: hasattr(message, 'new_chat_members') and message.new_chat_members)
async def greet_new_members(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {message.new_chat_members}")
    for new_member in message.new_chat_members:
        if new_member.is_bot:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç: {new_member}")
            continue
        logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        
        welcome_text = f"‚ö°‚ö°‚ö°–ü—Ä–∏–≤–µ—Ç, *{new_member.first_name}*! –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã.‚ö°‚ö°‚ö° {WELCOME_TEXT}"
        try:
            await message.answer(welcome_text, parse_mode="Markdown")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        except TelegramBadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {new_member.first_name}: {e}")

# –ü—Ä–æ—â–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(lambda message: hasattr(message, 'left_chat_member') and message.left_chat_member)
async def say_goodbye(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {message.left_chat_member}")
    left_member = message.left_chat_member
    if left_member.is_bot:
        logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç: {left_member}")
        return
    logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è {left_member.first_name} (ID: {left_member.id})") 
    goodbye_text = f"–ü—Ä–æ—â–∞–π, {left_member.first_name}! –ú—ã –ù–ï –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ.üëã"
    try:
        await message.answer(goodbye_text)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è {left_member.first_name} (ID: {left_member.id})")
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—â–∞–Ω–∏—è –¥–ª—è {left_member.first_name}: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –†–æ—É—Ç–µ—Ä
router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_reactions = {}

# –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
async def long_task_wrapper(func, *args, **kwargs):
    try:
        logging.info(f"–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ {func.__name__}")
        await func(*args, **kwargs)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ {func.__name__}: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fix
@router.message(Command(commands=["fix"]))
async def fix_handler(message: types.Message):
    try:
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É
        plus_button = InlineKeyboardButton(text="‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data="join_plus")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[plus_button]])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        sent_message = await message.answer("–¢–µ—Å—Ç", reply_markup=keyboard)
        await sent_message.pin()
        user_reactions.clear()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ –æ–±—ë—Ä—Ç–∫—É
        asyncio.create_task(long_task_wrapper(manage_fix_message, sent_message, message))
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /fix: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –î–æ–ª–≥–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
async def manage_fix_message(sent_message: types.Message, command_message: types.Message):
    logging.info("–û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞—á–∞–ª–æ—Å—å")
    try:
        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(60)
        logging.info("60 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ, —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await sent_message.delete()
            logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        except TelegramBadRequest as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        logging.info(f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π: {user_reactions}")
        joined_in_limit = list(user_reactions.values())[:5]
        left_out = list(user_reactions.values())[5:]

        if joined_in_limit:
            logging.info(f"–í —Ñ—É–ª–∫—É –≤–æ—à–ª–∏: {joined_in_limit}")
            await command_message.answer(f"–í —Ñ—É–ª–∫—É –≤–æ—à–ª–∏: {', '.join(joined_in_limit)}")
        if left_out:
            logging.info(f"–¢–∞–∫–∂–µ –ø–ª—é—Å–æ–≤–∞–ª–∏: {left_out}")
            await command_message.answer(f"–¢–∞–∫–∂–µ –ø–ª—é—Å–æ–≤–∞–ª–∏: {', '.join(left_out)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ manage_fix_message: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "+"
@router.callback_query(lambda callback: callback.data == "join_plus")
async def handle_plus_reaction(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_reactions:
        user_reactions[user_id] = callback.from_user.first_name
        await callback.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
        reaction_count = len(user_reactions)

        sent_message = callback.message
        updated_text = f"–¢–µ—Å—Ç\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {reaction_count}"

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        if sent_message.text != updated_text:
            await sent_message.edit_text(updated_text, reply_markup=sent_message.reply_markup)

        if reaction_count == 5:
            updated_text = f"–¢–µ—Å—Ç\n\n–£–∂–µ —Ñ—É–ª–∫–∞! ({', '.join(user_reactions.values())})"
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            if sent_message.text != updated_text:
                await sent_message.edit_text(updated_text, reply_markup=None)
    else:
        await callback.answer("–í—ã —É–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å!")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fu
@router.message(Command(commands=["fu"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def fu_handler(message: Message):
    # –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ TRIGGERS
    trigger = "–∫–æ–¥ –∫—Ä–∞—Å–Ω—ã–π —Ç—É—Ç –º–∞—Ç—é–∫–∏"  # –¢—Ä–∏–≥–≥–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞ /fu
    if trigger in TRIGGERS:
        response = TRIGGERS[trigger]  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç)
        if isinstance(response, str):
            await message.answer(response, parse_mode="Markdown")      
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'text', 'image', 'gif'
        elif isinstance(response, dict):
            if "text" in response:
                await message.answer(response["text"], parse_mode="Markdown")
            if "image" in response:
                await message.answer_photo(response["image"])
            if "gif" in response:
                await message.answer_animation(response["gif"])
    else:
        await message.answer("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bye1
@router.message(Command(commands=["bye1"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def dno_handler(message: Message):
    video_file_id = "BAACAgIAAxkBAAIDIGdK0OJwj31wUKdAUgxygDBJs2IdAAL3WAACVk5YSsQhdK_UudsRNgQ"  # –í–∞—à file_id
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
        await message.answer_video(video_file_id)
        print(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bye2
@router.message(Command(commands=["bye2"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def dno_handler(message: Message):
    video_file_id = "BAACAgIAAxkBAAIDI2dLDIjfeiMQ55Ae8yv-GzRHfSnZAAIzXAACVk5YSlsGnAdQnVQ7NgQ"  # –í–∞—à file_id
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
        await message.answer_video(video_file_id)
        print(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nakol
@router.message(Command(commands=["nakol"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def fu_handler(message: Message):
    # –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ TRIGGERS
    trigger = "–Ω–∞ –∫–æ–ª –ø–æ—Å–∞–¥–∏—Ç—å"  # –¢—Ä–∏–≥–≥–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞ /fu
    if trigger in TRIGGERS:
        response = TRIGGERS[trigger]  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç)
        if isinstance(response, str):
            await message.answer(response, parse_mode="Markdown")      
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'text', 'image', 'gif'
        elif isinstance(response, dict):
            if "text" in response:
                await message.answer(response["text"], parse_mode="Markdown")
            if "image" in response:
                await message.answer_photo(response["image"])
            if "gif" in response:
                await message.answer_animation(response["gif"])
    else:
        await message.answer("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dno
@router.message(Command(commands=["dno"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def dno_handler(message: Message):
    video_file_id = "BAACAgIAAxkBAAIDImdK3qVe2zCyGZNxRMPeWUL6DL5lAAJlWQACVk5YSrZ9OPVNhsglNgQ"  # –í–∞—à file_id
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
        await message.answer_video(video_file_id)
        print(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hi
@router.message(Command(commands=["hi"]))
async def send_welcome(message: Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WELCOME_TEXT —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        await message.answer(WELCOME_TEXT, parse_mode="Markdown")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bot
@router.message(Command(commands=["bot"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def help_handler(message: Message):
    help_text = HELP_TEXT_HEADER    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –Ω—É–º–µ—Ä—É–µ–º –∏—Ö
    for i, trigger in enumerate(TRIGGERS, 1):
        trigger_text = trigger.split(":")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –¥–æ —Å–∏–º–≤–æ–ª–∞ ":" –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ ":" –Ω–µ—Ç
        trigger_text = trigger_text.capitalize()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        help_text += f"{i}. {trigger_text}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ —Ñ—Ä–∞–∑—É
    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=["help"]))
async def help_handler(message: Message):
    help_text = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ COMMANDS_LIST
    for command in COMMANDS_LIST:
        help_text += f"{command}\n"
    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getid
@router.message(Command(commands=["getid"]))
async def send_chat_id(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
        chat_id = message.chat.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à Chat ID: `{chat_id}`", parse_mode="Markdown")
        logging.info(f"Chat ID ({chat_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Chat ID: {e}")
        
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢—Ä–∏–≥–≥–µ—Ä—ã
@router.message(lambda message: message.text and any(trigger in message.text.lower() for trigger in TRIGGERS))
async def trigger_handler(message: Message):
    message_text = message.text.lower()
    for trigger, response in TRIGGERS.items():
        if trigger in message_text:
            if isinstance(response, dict):
                if "text" in response:
                    await message.answer(response["text"], parse_mode="Markdown")
                if "image" in response:
                    try:
                        await message.answer_photo(response["image"])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                if "gif" in response:
                    try:
                        await message.answer_animation(response["gif"])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
            else:
                await message.answer(response, parse_mode="Markdown")
            break
