import logging
from aiogram import Router, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from tgbot.triggers import TRIGGERS, WELCOME_TEXT, HELP_TEXT_HEADER, COMMANDS_LIST, NAME_TABLE, ALIASES

router = Router()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(lambda message: hasattr(message, 'new_chat_members') and message.new_chat_members)
async def greet_new_members(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {message.new_chat_members}")
    for new_member in message.new_chat_members:
        if new_member.is_bot:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç: {new_member}")
            continue
        logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ triggers.py –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        welcome_text = f"‚ö°‚ö°‚ö°–ü—Ä–∏–≤–µ—Ç, *{new_member.first_name}*! –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã.‚ö°‚ö°‚ö° {WELCOME_TEXT}"
        try:
            await message.answer(welcome_text, parse_mode="Markdown")  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∂–∏–º Markdown
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {new_member.first_name}: {e}")

# –ü—Ä–æ—â–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(lambda message: hasattr(message, 'left_chat_member') and message.left_chat_member)
async def say_goodbye(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {message.left_chat_member}")
    left_member = message.left_chat_member
    if left_member.is_bot:
        logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç: {left_member}")
        return
    logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è {left_member.first_name} (ID: {left_member.id})") 
    goodbye_text = f"–ü—Ä–æ—â–∞–π, {left_member.first_name}! –ú—ã –ù–ï –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ.üëã"
    try:
        await message.answer(goodbye_text)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è {left_member.first_name} (ID: {left_member.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—â–∞–Ω–∏—è –¥–ª—è {left_member.first_name}: {e}")

def build_expanded_table(name_table, aliases):
    expanded_table = {}
    for key, value in name_table.items():
        expanded_table[key] = value
        if key in aliases:
            for alias in aliases[key]:
                expanded_table[alias] = value
    return expanded_table

@router.message(Command(commands=["kto"]))
async def who_is_this(message: types.Message):
    # –†–∞—Å—à–∏—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∞–ª–∏–∞—Å–∞–º–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    expanded_table = build_expanded_table(NAME_TABLE, ALIASES)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç
    args = message.text.split(' ', 1)

    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω
    if len(args) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ 'all' –¥–ª—è –≤—Å–µ—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    name = args[1].strip().lower()

    # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ 'all', –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–±–µ–∑ –∞–ª–∏–∞—Å–æ–≤)
    if name == "all":
        response = "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        for user_name, user_info in NAME_TABLE.items():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –±–µ–∑ –∞–ª–∏–∞—Å–æ–≤
            response += f"\n–ò–º—è: {user_info['name']}\n–ò–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º: {user_info['tgnick']}\n–ù–∏–∫: {user_info['nick']}\n–ò–Ω—Ñ–æ: {user_info['about']}\n"
        await message.answer(response)
    else:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞
        expanded_table_lower = {key.lower(): value for key, value in expanded_table.items()}
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ —Å –∞–ª–∏–∞—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–∞–±–ª–∏—Ü—É —Å –Ω–∏–∂–Ω–∏–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–º
        user_info = expanded_table_lower.get(name)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –∞–ª–∏–∞—Å–∞–º–∏ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        if user_info:
            response = f"–ò–º—è: {user_info['name']}\n–ù–∏–∫: {user_info['nick']}\n–ò–Ω—Ñ–æ: {user_info['about']}"
            await message.answer(response)
        else:
            await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ '{args[1]}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fu
@router.message(Command(commands=["fu"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def fu_handler(message: Message):
    # –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ TRIGGERS
    trigger = "–∫–æ–¥ –∫—Ä–∞—Å–Ω—ã–π —Ç—É—Ç –º–∞—Ç—é–∫–∏"  # –¢—Ä–∏–≥–≥–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞ /fu
    if trigger in TRIGGERS:
        response = TRIGGERS[trigger]  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç)
        if isinstance(response, str):
            await message.answer(response, parse_mode="Markdown")      
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'text', 'image', 'gif'
        elif isinstance(response, dict):
            if "text" in response:
                await message.answer(response["text"], parse_mode="Markdown")
            if "image" in response:
                await message.answer_photo(response["image"])
            if "gif" in response:
                await message.answer_animation(response["gif"])
    else:
        await message.answer("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bye1
@router.message(Command(commands=["bye1"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def dno_handler(message: Message):
    video_file_id = "BAACAgIAAxkBAAIDIGdK0OJwj31wUKdAUgxygDBJs2IdAAL3WAACVk5YSsQhdK_UudsRNgQ"  # –í–∞—à file_id
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
        await message.answer_video(video_file_id)
        print(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /bye2
@router.message(Command(commands=["bye2"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def dno_handler(message: Message):
    video_file_id = "BAACAgIAAxkBAAIDI2dLDIjfeiMQ55Ae8yv-GzRHfSnZAAIzXAACVk5YSlsGnAdQnVQ7NgQ"  # –í–∞—à file_id
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
        await message.answer_video(video_file_id)
        print(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /nakol
@router.message(Command(commands=["nakol"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def fu_handler(message: Message):
    # –ü—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä –∏–∑ TRIGGERS
    trigger = "–Ω–∞ –∫–æ–ª –ø–æ—Å–∞–¥–∏—Ç—å"  # –¢—Ä–∏–≥–≥–µ—Ä, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥–∞ /fu
    if trigger in TRIGGERS:
        response = TRIGGERS[trigger]  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (—Ç–µ–∫—Å—Ç)
        if isinstance(response, str):
            await message.answer(response, parse_mode="Markdown")      
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏ 'text', 'image', 'gif'
        elif isinstance(response, dict):
            if "text" in response:
                await message.answer(response["text"], parse_mode="Markdown")
            if "image" in response:
                await message.answer_photo(response["image"])
            if "gif" in response:
                await message.answer_animation(response["gif"])
    else:
        await message.answer("–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dno
@router.message(Command(commands=["dno"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def dno_handler(message: Message):
    video_file_id = "BAACAgIAAxkBAAIDImdK3qVe2zCyGZNxRMPeWUL6DL5lAAJlWQACVk5YSrZ9OPVNhsglNgQ"  # –í–∞—à file_id
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º file_id
        await message.answer_video(video_file_id)
        print(f"–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hi
@router.message(Command(commands=["hi"]))
async def send_welcome(message: Message):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WELCOME_TEXT —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
        await message.answer(WELCOME_TEXT, parse_mode="Markdown")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=["help"]))
async def help_handler(message: Message):
    help_text = "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ COMMANDS_LIST
    for command in COMMANDS_LIST:
        help_text += f"{command}\n"
    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /getid
@router.message(Command(commands=["getid"]))
async def send_chat_id(message: Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
        chat_id = message.chat.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"–í–∞—à Chat ID: `{chat_id}`", parse_mode="Markdown")
        logging.info(f"Chat ID ({chat_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Chat ID: {e}")
        
# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢—Ä–∏–≥–≥–µ—Ä—ã
@router.message(lambda message: message.text and any(trigger in message.text.lower() for trigger in TRIGGERS))
async def trigger_handler(message: Message):
    message_text = message.text.lower()
    for trigger, response in TRIGGERS.items():
        if trigger in message_text:
            if isinstance(response, dict):
                if "text" in response:
                    await message.answer(response["text"], parse_mode="Markdown")
                if "image" in response:
                    try:
                        await message.answer_photo(response["image"])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                if "gif" in response:
                    try:
                        await message.answer_animation(response["gif"])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
            else:
                await message.answer(response, parse_mode="Markdown")
            break
