import logging
from aiogram import Router
from aiogram.types import Message, ChatMemberUpdated
from aiogram.filters import Command, IS_MEMBER, IS_NOT_MEMBER, ChatMemberUpdatedFilter
from tgbot.views import join_message, left_message
from tgbot.triggers import TRIGGERS
from tgbot import views

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

@router.message()
async def debug_handler(message: Message):
    logger.info(f"Debugging update: {message}")

@router.message(lambda message: message.new_chat_members)
async def greet_new_members(message: Message):
    for new_member in message.new_chat_members:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
        if new_member.is_bot:
            continue
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = (
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {new_member.first_name}!"
            " –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è —É –Ω–∞—Å üòä."
        )
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            await message.answer(welcome_text)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {new_member.first_name}: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=["help"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def help_handler(message: Message):
    help_text = "*–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –Ø –ë–æ—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π!*\n\n" \
                "–Ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–∏—á–∫–æ–≤, —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∏ –¥–µ–ª–∞—é —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º.\n\n" \
                "–¢–∞–∫ –∂–µ, —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã:\n"
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –Ω—É–º–µ—Ä—É–µ–º –∏—Ö
    for i, trigger in enumerate(TRIGGERS, 1):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –¥–æ —Å–∏–º–≤–æ–ª–∞ ":" –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ ":" –Ω–µ—Ç
        trigger_text = trigger.split(":")[0]
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        trigger_text = trigger_text.capitalize()
        help_text += f"{i}. {trigger_text}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ —Ñ—Ä–∞–∑—É
    
    await message.answer(help_text, parse_mode="Markdown")
            
@router.message(lambda message: message.text and any(trigger in message.text.lower() for trigger in TRIGGERS))
async def trigger_handler(message: Message):
    message_text = message.text.lower()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    for trigger, response in TRIGGERS.items():
        if trigger in message_text:
            if isinstance(response, dict):  # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (—Å —Ç–µ–∫—Å—Ç–æ–º, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ gif)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                if "text" in response:
                    await message.answer(response["text"], parse_mode="Markdown")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "image" in response:
                    await message.answer_photo(response["image"])
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º gif, –µ—Å–ª–∏ –µ—Å—Ç—å
                if "gif" in response:
                    await message.answer_animation(response["gif"])
            
            else:
                await message.answer(response, parse_mode="Markdown")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
