import logging
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from tgbot.triggers import TRIGGERS

router = Router()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(lambda message: hasattr(message, 'new_chat_members') and message.new_chat_members)
async def greet_new_members(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {message.new_chat_members}")
    for new_member in message.new_chat_members:
        if new_member.is_bot:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç: {new_member}")
            continue
        logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        welcome_text = f"–ü—Ä–∏–≤–µ—Ç, {new_member.first_name}! –¢–µ–ø–µ—Ä—å —Ç—ã —á–∞—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã. –ë—ã—Ç—å –≤ –æ—Å–Ω–æ–≤–µ - –æ–∑–Ω–∞—á–∞–µ—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∂–∏–∑–Ω–∏ –∏ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–ª–∞–Ω–∞. 
        –ú—ã –∫–∞—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤, –¥–µ–ª–∏–º—Å—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —É—á–∞—Å—Ç–≤—É–µ–º –≤ –∫–ª–∞–Ω–æ–≤—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö, –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —Å–±–æ—Ä—ã, –ø–æ–º–æ–≥–∞–µ–º —Å –ø—Ä–æ–∫–∞—á–∫–æ–π, –∏—â–µ–º –∏ –ø—Ä–∏–≤–æ–¥–∏–º –Ω–æ–≤—ã—Ö –ª—é–¥–µ–π, –ø—Ä–æ–≤–æ–¥–∏–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è, —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è —Å –≤–∞—Ä–∞–º–∏ (–µ—Å–ª–∏ –∏–∑—Ä–µ–¥–∫–∞ –æ–Ω–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è) –∏ –¥—Ä.
        –ï—Å–ª–∏ —Ç—ã –Ω–æ–≤–∏—á–æ–∫, —Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–ª–∞–Ω–∞, –∫–∞–∫ —Ç—ã —Å–º–æ–∂–µ—à—å –Ω–∞—Å —É—Å–∏–ª–∏—Ç—å. –ü—Ä–æ–∫–∞—á–∫–∞ —Å–≤–æ–∏—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª–∞–Ω–æ–≤—ã—Ö –º–∏—Å—Å–∏–π –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è. –≠—Ç–æ —Ç–æ, —á—Ç–æ –∫–∞–∂–¥—ã–π –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        –ï—Å–ª–∏ —Ç—ã —É–∂–µ –≤ –æ—Å–Ω–æ–≤–µ, –Ω–æ –Ω–∏–∫–∞–∫ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∫–ª–∞–Ω–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å, —Ç–æ —Ç—ã –∏ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∫–ª–∞–Ω–∞. –ü—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–¥–∞–≤–∞—Ç—å—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–º."
        try:
            await message.answer(welcome_text)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è {new_member.first_name} (ID: {new_member.id})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {new_member.first_name}: {e}")

# –ü—Ä–æ—â–∞–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@router.message(lambda message: hasattr(message, 'left_chat_member') and message.left_chat_member)
async def say_goodbye(message: Message):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞: {message.left_chat_member}")
    left_member = message.left_chat_member
    if left_member.is_bot:
        logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –±–æ—Ç: {left_member}")
        return
    logging.info(f"–§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è {left_member.first_name} (ID: {left_member.id})") 
    goodbye_text = f"–ü—Ä–æ—â–∞–π, {left_member.first_name}! –ú—ã –ù–ï –±—É–¥–µ–º —Å–∫—É—á–∞—Ç—å –ø–æ —Ç–µ–±–µ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –æ–±—Ä–∞—Ç–Ω–æ –Ω–µ –ø—É—Å—Ç–∏–º! üëã"
    try:
        await message.answer(goodbye_text)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ—â–∞–Ω–∏–µ –¥–ª—è {left_member.first_name} (ID: {left_member.id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ—â–∞–Ω–∏—è –¥–ª—è {left_member.first_name}: {e}")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command(commands=["help"]))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä Command
async def help_handler(message: Message):
    help_text = "*–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ! –Ø –ë–æ—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –∏ —Å–ª–µ–∂—É –∑–∞ —Ç–æ–±–æ–π!*\n\n" \
                "–Ø –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –Ω–æ–≤–∏—á–∫–æ–≤, —Å–ª–µ–∂—É –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∏ –¥–µ–ª–∞—é —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º.\n\n" \
                "–¢–∞–∫–∂–µ —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—Ä–∞–∑—ã:\n"
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –Ω—É–º–µ—Ä—É–µ–º –∏—Ö
    for i, trigger in enumerate(TRIGGERS, 1):
        trigger_text = trigger.split(":")[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∞—Å—Ç—å –¥–æ —Å–∏–º–≤–æ–ª–∞ ":" –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ ":" –Ω–µ—Ç
        trigger_text = trigger_text.capitalize()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
        help_text += f"{i}. {trigger_text}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∏ —Ñ—Ä–∞–∑—É
    
    await message.answer(help_text, parse_mode="Markdown")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢—Ä–∏–≥–≥–µ—Ä—ã
@router.message(lambda message: message.text and any(trigger in message.text.lower() for trigger in TRIGGERS))
async def trigger_handler(message: Message):
    message_text = message.text.lower()
    for trigger, response in TRIGGERS.items():
        if trigger in message_text:
            if isinstance(response, dict):
                if "text" in response:
                    await message.answer(response["text"], parse_mode="Markdown")
                if "image" in response:
                    try:
                        await message.answer_photo(response["image"])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                if "gif" in response:
                    try:
                        await message.answer_animation(response["gif"])
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")
            else:
                await message.answer(response, parse_mode="Markdown")
            break
